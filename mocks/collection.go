// Code generated by MockGen. DO NOT EDIT.
// Source: collection.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockCollectionInterface is a mock of CollectionInterface interface.
type MockCollectionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionInterfaceMockRecorder
}

// MockCollectionInterfaceMockRecorder is the mock recorder for MockCollectionInterface.
type MockCollectionInterfaceMockRecorder struct {
	mock *MockCollectionInterface
}

// NewMockCollectionInterface creates a new mock instance.
func NewMockCollectionInterface(ctrl *gomock.Controller) *MockCollectionInterface {
	mock := &MockCollectionInterface{ctrl: ctrl}
	mock.recorder = &MockCollectionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionInterface) EXPECT() *MockCollectionInterfaceMockRecorder {
	return m.recorder
}

// InsertOne mocks base method.
func (m *MockCollectionInterface) InsertOne(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, document}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockCollectionInterfaceMockRecorder) InsertOne(ctx, document interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, document}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockCollectionInterface)(nil).InsertOne), varargs...)
}
